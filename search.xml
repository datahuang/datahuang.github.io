<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Coursera机器学习课程笔记_第一周]]></title>
    <url>%2F2019%2F04%2F09%2FCoursera%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E5%91%A8%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F03%2F19%2FSQL%E7%BB%8F%E5%85%B850%E9%A2%98%EF%BC%88%E4%B8%8B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[title: SQL经典50题（下）date: 2018-03-26 21:02:45categories: 练习tags: SQL MySQL 21、查询学生平均成绩及其名次（参考）1234567select S,avg,( select count(*) from ( select S,avg(score) as avg from sc group by S) a where a.avg &gt; b.avg)+1 rankfrom (select S,avg(score) as avg from sc group by S) border by avg desc 22、查询各科成绩前三名的记录123456select a.C,a.S,a.score,count(b.score)+1 as rankfrom sc a left join sc bon a.score &lt; b.score and a.C = b.C group by a.C,a.Shaving rank between 1 and 3order by a.C,a.score desc 23、查询每门课程被选修的学生数123select C,count(S)from scgroup by C 24、查询出只有两门课程的全部学生的学号和姓名12345selec t a.S,a.Sname from student a join ( select S,count(C) as num from sc group by S having num = 2) bon a.S = b.S 25、查询男生、女生人数123select Ssex,count(distinct S) sumfrom studentgroup by Ssex 26、查询名字中含有”风”字的学生信息123select *from studentwhere Sname like &apos;%风%&apos; 27、查询同名同性学生名单，并统计同名人数1234select Sname,Ssex,count(*) numfrom studentgroup by Sname,Ssexhaving num &gt; 1 28、查询1990年出生的学生名单(注：Student表中Sage列的类型是datetime)123select *from studentwhere Sage like &apos;1990%&apos; 29、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号1234select C,avg(score) avgfrom scgroup by Corder by avg desc,C 30、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩123456select a.S,b.Sname,a.avgfrom (select S,avg(score) avg from sc group by S) a,student bwhere a.S = b.S and a.avg &gt; 85group by a.S 31、查询课程名称为”数学”，且分数低于60的学生姓名和分数12345select a.Sname,d.scorefrom student a join (select b.S,c.Cname,b.scorefrom sc b,course cwhere b.C = c.C and Cname = &apos;数学&apos; and score &lt; 60) don a.S = d.S 32、查询所有学生的课程及分数情况123select a.*,b.C,b.scorefrom student a,sc bwhere a.S = b.S 33、查询任何一门课程成绩在70分以上的姓名、课程名称和分数123select a.Sname,c.Cname,b.scorefrom student a,sc b,course cwhere b.C = c.C and a.S = b.S and b.score &gt; 70 34、查询不及格的课程123select a.Sname,c.Cname,b.scorefrom student a,sc b,course cwhere b.C = c.C and a.S = b.S and b.score &lt; 60 35、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名123select a.S,a.Snamefrom student a,sc b where a.S = b.S and b.C = &apos;01&apos; and b.score &gt;= 80 36、求每门课程的学生人数123select C,count(S) as num from scgroup by C 37、查询选修”张三”老师所授课程的学生中，成绩最高的学生信息及其成绩1234select a.*,max(e.score) maxfrom student a left join (select b.S,b.score from sc b,course c,teacher d where b.C = c.C and c.T = d.T and d.Tname = &apos;张三&apos;) eon a.S = e.S 38、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩(参考)123select a.* from sc a,sc bwhere a.C != b.C and a.score = b.score and a.S = b.Sgroup by a.C,a.score 39、查询每门功成绩最好的前两名（未完成）123456select a.S,a.C,a.score from sc as a left join sc as b on a.C = b.C and a.score&lt;b.scoregroup by a.C,a.Shaving count(b.score)&lt;2 #比自己成绩高的学生不能多于2个order by a.C 40、统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列12345select C,count(S) as num from scgroup by Chaving count(S) &gt; 5order by num desc,C 41.检索至少选修两门课程的学生学号1234select S,count(C) numfrom scgroup by Shaving num &gt;= 2 42、查询选修了全部课程的学生信息12345select a.*,count(b.C) numfrom student a,sc bwhere a.S = b.Sgroup by a.Shaving num = (select count(distinct C) from course) 43、查询各学生的年龄12select S,Sname,timestampdiff(year,Sage,now()) as agefrom student 44、查询本周过生日的学生123select *from studentwhere week(Sage) = week(now()) 45、查询下周过生日的学生123select *from studentwhere week(Sage) = week(now())+1 46、查询本月过生日的学生123select *from studentwhere month(Sage) = month(now()) 48、查询下月过生日的学生123select *from studentwhere month(Sage) = month(now())+1]]></content>
  </entry>
  <entry>
    <title><![CDATA[SQL经典50题（上）]]></title>
    <url>%2F2018%2F03%2F19%2FSQL%E7%BB%8F%E5%85%B850%E9%A2%98%EF%BC%88%E4%B8%8A%EF%BC%89%2F</url>
    <content type="text"><![CDATA[平时工作中多用到SQL，很多时候根据业务需求感觉无法实现自己想要的结果，有很多语法结构都比较混乱，看到网上流传比较广泛的SQL经典50题，特意花了两周时间自己从头到尾实现了一遍（因为工作原因，只能利用晚上回家的时间），中间有个别题目没有思路，借鉴了网上的答案，同时因为使用MySQL实现，可能个别语法存在差异。 #创建测试表学生表1234567891011create table Student(S varchar(10),Sname varchar(10),Sage datetime,Ssex nvarchar(10))insert into Student values(&apos;01&apos; , &apos;赵雷&apos; , &apos;1990-01-01&apos; , &apos;男&apos;)insert into Student values(&apos;02&apos; , &apos;钱电&apos; , &apos;1990-12-21&apos; , &apos;男&apos;)insert into Student values(&apos;03&apos; , &apos;孙风&apos; , &apos;1990-05-20&apos; , &apos;男&apos;)insert into Student values(&apos;04&apos; , &apos;李云&apos; , &apos;1990-08-06&apos; , &apos;男&apos;)insert into Student values(&apos;05&apos; , &apos;周梅&apos; , &apos;1991-12-01&apos; , &apos;女&apos;)insert into Student values(&apos;06&apos; , &apos;吴兰&apos; , &apos;1992-03-01&apos; , &apos;女&apos;)insert into Student values(&apos;07&apos; , &apos;郑竹&apos; , &apos;1989-07-01&apos; , &apos;女&apos;)insert into Student values(&apos;08&apos; , &apos;王菊&apos; , &apos;1990-01-20&apos; , &apos;女&apos;)select *from student 课程表1234create table Course(C varchar(10),Cname,varchar(10),T varchar(10))insert into Course values(&apos;01&apos; , &apos;语文&apos; , &apos;02&apos;)insert into Course values(&apos;02&apos; , &apos;数学&apos; , &apos;01&apos;)insert into Course values(&apos;03&apos; , &apos;英语&apos; , &apos;03&apos;) 教师表1234create table (T varchar(10),Tname varchar(10))insert into Teacher values(&apos;01&apos; , &apos;张三&apos;)insert into Teacher values(&apos;02&apos; , &apos;李四&apos;)insert into Teacher values(&apos;03&apos; , &apos;王五&apos;) 成绩表12345678910111213141516171819create table SC(S varchar(10),C varchar(10),score decimal(18,1))insert into SC values(&apos;01&apos; , &apos;01&apos; , 80)insert into SC values(&apos;01&apos; , &apos;02&apos; , 90)insert into SC values(&apos;01&apos; , &apos;03&apos; , 99)insert into SC values(&apos;02&apos; , &apos;01&apos; , 70)insert into SC values(&apos;02&apos; , &apos;02&apos; , 60)insert into SC values(&apos;02&apos; , &apos;03&apos; , 80)insert into SC values(&apos;03&apos; , &apos;01&apos; , 80)insert into SC values(&apos;03&apos; , &apos;02&apos; , 80)insert into SC values(&apos;03&apos; , &apos;03&apos; , 80)insert into SC values(&apos;04&apos; , &apos;01&apos; , 50)insert into SC values(&apos;04&apos; , &apos;02&apos; , 30)insert into SC values(&apos;04&apos; , &apos;03&apos; , 20)insert into SC values(&apos;05&apos; , &apos;01&apos; , 76)insert into SC values(&apos;05&apos; , &apos;02&apos; , 87)insert into SC values(&apos;06&apos; , &apos;01&apos; , 31)insert into SC values(&apos;06&apos; , &apos;03&apos; , 34)insert into SC values(&apos;07&apos; , &apos;02&apos; , 89)insert into SC values(&apos;07&apos; , &apos;03&apos; , 98) 1、查询”01”课程比”02”课程成绩高的学生的信息及课程分数1234567select * from Student RIGHT JOIN ( select sc1.S, score1, score2 from (select S, score as score1 from sc where sc.C = &apos;01&apos;)as sc1, (select S, score as score2 from sc where sc.C = &apos;02&apos;)as sc2 where sc1.S = sc2.S AND sc1.score1 &gt; sc2.score2) aon Student.S = a.S; 方法二12345select * from (select S,C,score from SC where C=&apos;01&apos;)mjoin (select S,C,score from SC where C=&apos;02&apos;)non m.S=n.S WHERE m.score &gt; n.score 2、查询”01”课程比”02”课程成绩低的学生的信息及课程分数123456select * from student right join ( select sc1.S,score1,score2 from (select S,score as score1 from sc where C = &apos;01&apos;) sc1, (select S,score as score2 from sc where C = &apos;02&apos;) sc2 where sc1.S = sc2.S and sc1.score1 &lt; sc2.score2) aon student.S = a.S 3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩12345select student.S,student.Sname,a.avgscore from student right join ( select sc.S,avg(score) as avgscore from SC group by sc.S ) a #对每个学生进行分组on student.S = a.Swhere avgscore &gt; 60 4、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩1234select student.S,student.Sname,a.TC,a.TS from student right join ( select S,count(C) as TC,sum(score) TS from SC group by S) aon student.S = a.S 5、查询”李”姓老师的数量12select count(T) num from teacherwhere Tname like &apos;李%&apos; 6、查询学过”张三”老师授课的同学的信息12345select student.* from student where S in ( select S from sc where C in ( select C from course where T in ( select T from teacher where Tname = &apos;张三&apos;)) ) 7、查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息12345select * from student where S in ( select a.S from (select S from sc where C = 01) a, (select S from sc where C = 02) b where a.S = b.S) 方法二123456select * from student right join (select a.S,c1,c2 from (select S,C as c1 from sc where C = 01) a, (select S,C as c2 from sc where C = 02) b where a.S = b.S) con student.S = c.S 8、查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息123select * from student where S in ( select S from sc where C = 01 and S not in ( select S from sc where C = 02)) 9、查询没有学全所有课程的同学的信息123select student.* from student join ( select S,count(distinct C) as num from sc group by S) awhere student.S = a.S and a.num &lt; 3 10、查询至少有一门课与学号为”01”的同学所学相同的同学的信息1234select * from student where S in ( select S from sc where C in ( select C from sc where S = 01))and S != 01 11、查询和”01”号的同学学习的课程完全相同的其他同学的信息（难点）12345select student.* from student where S in ( select S from sc where S != 01 and C in ( select C from sc where S = 01) group by S having count(*) = (select count(*) from sc where S = 01)) 11、查询没学过”张三”老师讲授的任一门课程的学生姓名1234select Sname from student where S not in ( select S from sc where C in ( select C from course where T in ( select T from teacher where Tname = &apos;张三&apos;))) 12、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩12345select s.S,s.Sname,a.avg from student s right join ( select S,avg(score) as avg from sc where score &lt; 60 group by S having count(*)&gt;=2) aon s.S = a.S 13、检索”01”课程分数小于60，按分数降序排列的学生信息1234select student.* from student right join ( select S,score from sc where score &lt; 60 and C = 01)aon student.S = a.Sorder by a.score desc 14、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩123456select sc.S,sc.C,sc.score,a.avg from sc join ( select S,avg(score) avg from sc group by S) aon sc.S = a.Sgroup by S,Corder by a.avg desc 15、查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率– 及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90mysql中连接字符串使用concat函数12345678select sc.C,course.Cname,max(sc.score) Max,min(sc.score) Min,avg(sc.score) Avg, concat(round(100*(sum(case when sc.score &gt;= 60 then 1 else 0 end)/sum(case when sc.score then 1 else 0 end)),1),&apos;%&apos;) as &apos;及格率&apos;, concat(round(100*(sum(case when sc.score &gt;= 70 and sc.score &lt; 80 then 1 else 0 end)/sum(case when sc.score then 1 else 0 end)),1),&apos;%&apos;) as &apos;中等率&apos;, concat(round(100*(sum(case when sc.score &gt;= 80 and sc.score &lt; 90 then 1 else 0 end)/sum(case when sc.score then 1 else 0 end)),1),&apos;%&apos;) as &apos;优良率&apos;, concat(round(100*(sum(case when sc.score &gt;= 90 then 1 else 0 end)/sum(case when sc.score then 1 else 0 end)),1),&apos;%&apos;) as &apos;优秀率&apos;from sc join course on sc.C = course.Cgroup by sc.C 16、按各科成绩进行排序，并显示排名(参考)123456select a.C,a.S,a.score,count(b.score)+1 as rankfrom sc a left join sc as b on a.score &lt; b.score and a.C = b.C #计算比自己分数高的有几个学生group by a.C,a.Sorder by a.C,rank 17、查询学生的总成绩并进行排名（使用变量）123456set @rank := 0select a.S,a.Sname,sum(b.score) as sum,@srank := @srank +1 as rank from student ajoin sc bon a.S = b.S group by a.Sorder by sum desc 每次查询时都必须初始化变量12345select c.S,c.Sname,c.sum,@rank := @rank +1 as rankfrom (select a.S,a.Sname,sum(b.score)as sum from student a join sc b on a.S = b.S group by a.S order by sum desc) c,(select @rank := 0) d 18、查询不同老师所教不同课程平均分从高到低显示123456select c.Tname as name,c.Cname,avg(score) as avg from sc join (select a.C,a.Cname,b.Tname from course a join teacher b on a.T = b.T) con sc.C = c.Cgroup by nameorder by avg desc 方法二12345select c.Tname,b.Cname,avg(a.score) avgfrom sc a,course b,teacher cwhere a.C =b.C and b.T =c.Tgroup by a.Corder by avg desc 19、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩(未完成，参考答案)1234567891011select a.*,b.* from ( select b.S,b.C,b.score,(select count(*) from sc a where a.C = &apos;01&apos; and a.score &gt; b.score)+1 rank from sc b where b.C = &apos;01&apos; having rank between 2 and 3 union all select b.S,b.C,b.score,(select count(*) from sc a where a.C = &apos;02&apos; and a.score &gt; b.score)+1 rank from sc b where b.C = &apos;02&apos; having rank between 2 and 3 union all select b.S,b.C,b.score,(select count(*) from sc a where a.C = &apos;03&apos; and a.score &gt; b.score)+1 rank from sc b where b.C = &apos;03&apos; having rank between 2 and 3 ) a,student bwhere a.S = b.S 20、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 123456789101112select a.C,b.Cname, count(case when 100 &gt;= a.score and a.score &gt;=85 then a.S end) &apos;[100-85]&apos;, concat(round(100*(sum(case when 100 &gt;= a.score and a.score &gt;=85 then 1 else 0 end)/sum(case when a.score then 1 else 0 end)),1),&apos;%&apos;) &apos;优秀率&apos;, count(case when 85 &gt; a.score and a.score &gt;=70 then a.S end) &apos;[85-70]&apos;, concat(round(100*(sum(case when 85 &gt; a.score and a.score &gt;=70 then 1 else 0 end)/sum(case when a.score then 1 else 0 end)),1),&apos;%&apos;) &apos;良好率&apos;, count(case when 70 &gt; a.score and a.score &gt;=60 then a.S end) &apos;[70-60]&apos;, concat(round(100*(sum(case when 70 &gt; a.score and a.score &gt;=60 then 1 else 0 end)/sum(case when a.score then 1 else 0 end)),1),&apos;%&apos;) &apos;中等率&apos;, count(case when 60 &gt; a.score and a.score &gt;=0 then a.S end) &apos;[60-0]&apos;, concat(round(100*(sum(case when 60 &gt; a.score and a.score &gt;=0 then 1 else 0 end)/sum(case when a.score then 1 else 0 end)),1),&apos;%&apos;) &apos;不及格率&apos;from sc a,course bwhere a.C = b.Cgroup by a.C]]></content>
      <categories>
        <category>练习</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + GitHub搭建个人技术博客]]></title>
    <url>%2F2018%2F01%2F20%2FHexo%2BGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[不管你是程序猿、攻城狮、运营喵或者产品汪，日常工作或学习中写博客都是很有必要的，方法也很简单，不想太麻烦就去简书或者CSDN开通自己的一个专栏，想高（zhuang）端（bi）一点就建立一个自己的站点博客，这里主要介绍近两年比较流行的使用Hexo+GitHub仓库搭建一个静态博客的过程。 搭建环境准备Node.js的安装和准备下载Node.js安装文件： 1.Windows Installer 32-bit2.Windows Installer 64-bit 查看自己计算机系统版本，选择相应的安装文件，小白用户直接选择32位，下载完成后打开安装文件，出现如图所示： 保持默认设置即可，一路Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口： Windows的运行界面 在新打开的窗口中输入cmd，敲击回车，打开命令行界面。（下文将直接用打开命令行来表示以上操作，记住哦~） 在打开的命令行界面中，输入12node -vnpm -v 如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。 配置Git环境下载Git安装文件： Git官网下载 然后就进入了Git的安装界面，如图： 点击next 和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择： Git PATH设置 这是对上图的解释，不需要了解请直接跳过Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：1git --version 如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。 GitHub账户的注册于设置如果已经拥有账号，请跳过此步~ 第一步: Github注册 打开GitHub官网，在下图的框中，分别输入自己的用户名，邮箱，密码。 然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。 一定要确认注册，否则无法使用gh-pages！ 第二步: 创建代码库 登陆之后，点击页面右上角的加号，选择New repository： 新建代码库 进入代码库创建页面： 在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示： 注意：比如我的github名称是gdatahuang这里你就填 datahuang.github.io,如果你的名字是jack，那你就填 jack.github.io 第三步:代码库设置 正确创建之后，你将会看到如下界面： 接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图： Github pages 点击Launch automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。 到此搭建hexo博客的相关环境配置已经完成，下面开始讲解Hexo的相关配置 安装及配置Hexo安装Hexo在任意位置单击鼠标右键，选择Git Bash Here，会弹出Git命令窗口。 在命令行中输入：1npm install hexo-cli -g 然后你会看到 可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入1npm install hexo --save 然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：1hexo -v 如果你看到了如图文字，则说明已经安装成功了。 Hexo配置在自己认为合适的地方创建一个文件夹，这里我以E：/hexo为例子讲解，首先在E盘目录下创建hexo文件夹，然后再再hexo文件夹下点击鼠标右键，选择Git Bash Here在弹出的命令行内输入：1hexo init 然后输入：1npm install 之后npm将会自动安装你需要的组件，只需要等待npm操作即可。 继续操作，同样是在命令行中，输入：1hexo g 然后输入：1hexo s 然后会提示：1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 在浏览器中打开http://localhost:4000/，你将会看到： 到目前为止，Hexo在本地的配置已经全都结束了。当然现在你的博客只能你自己在本地查看，其它人是看不到的，这里就需要与GitHub仓库联系起来，使得其他人也可以互联网浏览。 将Hexo与GitHub Page 联系起来在第一步中我们已经注册并搭建了一个GitHub库，仓库名为:yourname.github.io.例如我的仓库名为datahuang.github.io 打开hexo文件夹，找到_config.yml并打开，翻到最下面，做如下修改：1234deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master 比如我的就是：1234deploy: type: git repo: https://github.com/datahuang/datahuang.github.io.git branch: master 保存 部署博客在博客目录（既本文中的hexo文件夹，）下右键打开Git Bash Here，输入命令：1hexo g 生成静态网页文件，然后输入：1hexo s 在浏览器中的打开在浏览器中打开http://localhost:4000/预览一下当前博客的效果，如果确定没有问题输入：1hexo d 将最新得博客内容部署到GitHub仓库中，然后就可以通过yourname.github.io访问你的博客了。 发布博文博客搭建好后只有不断的更新博文才能体现博客的价值，同样在博客目录（既本文中的hexo文件夹，）下右键打开Git Bash Here，输入：1hexo new &quot;tltle&quot; 就可以新建一篇名为title的博文，博文名称自定义即可，这个时候在博客目录中是\source\_post文件夹中就会名为title.md的文件了，md文件是以MarkdDown书写的文本文件，大部分博客网站的博文大多都以MarkDown语言来书写，Hexo也不列外，关于MarkDown语法的规则和常用的MarkDown文本编辑器将在今后的博文中具体介绍，这里不再多加阐述。 博文写好以后可通过hexo g命令生成静态网页文件，通过hexo s在本地预览，最好通过hexo d部署到GitHub中。 更换主题得益于Hexo庞大的用户群体，Hexo官网提供了丰富多样的主题样式供用户选择，大家可凭个人喜好选择，因为我个人是一个极简主义者，所以我的博客使用的是大名鼎鼎的NexT主题，NexT提供了三种不同的风格可选，具体样式可到我的博客预览。 关于NexT主题的具体配置，有兴趣的小伙伴可到NexT官方文档查看。同时一些小功能的设置可参考下面这条博文:Hexo的NexT主题个性化教程:打造炫酷网站 防坑指南 npm由于是国外镜像，所以有时候难免被“墙”，如果安装过程中使用npm出错，建议使用国内镜像安装，这里我使用的是淘宝NPM镜像，输入以下命令行：1npm install -g cnpm --registry=https://registry.npm.taobao.org 等待安装完成后，在安装Hexo过程中将npm替换为cnpm即可。 安装过程中如果出现ERROR Deployer not found: git或者ERROR Deployer not found: github错误，输入：1npm install hexo-deployer-git --save 结语到这里一个完整的博客已经基本搭建完毕，接下来就是不断完善博客功能和更新博文了。在这里说一下关于域名问题，教程中我们使用的是GitHub仓库地址，是有300M的免费空间可以使用的，如果大家想使用自己的域名可以去万网或者腾讯云去购买，只需要几块钱就可以购买一个属于自己的域名（.com会相对贵一点），记住“不要购买.cn”“不要购买.cn”“不要购买.cn”，因为.cn是国内专属，是需要备案的，否则无法解析，尽量购买国际域名，这样就无需备案可直接解析。 我的博客域名是www.datahuang.com,当是是在万网搞活动花48元购买的，购买域名后只要把域名解析到GitHub站点仓库即可通过自己的域名来访问博客，关于如何解析域名可自行百度，并不难。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[走过2017,2018你好]]></title>
    <url>%2F2017%2F12%2F31%2F%E8%B5%B0%E8%BF%872017%2C2018%E4%BD%A0%E5%A5%BD%2F</url>
    <content type="text"><![CDATA[经过两周断断续续的搭建，今天博客大致功能基本完成 2017年的最后一天，写下了我个人博客的第一篇文章！ 2016年大学毕业，回到家乡，浑浑噩噩的度过了一年多时间，认识了几个真正交心的朋友，做了几个一无是处的项目。一年当中开心、焦躁、苦恼各种滋味都尝试过，但更多的是迷茫，内心有着自己既定的方向，却一直没有去实现，看着同龄人一步步的前进，自己却在原地消耗光阴。 2017年7月，为了不让以后的自己后悔，终于下定决心改变现状，辞去了工作，彻底解决了一些个人问题，九月底，一个人，一个拉杆箱和一件背包，来到了天府之国———成都。刚来的一段时间内并不是很顺利，压力一天天的增加，庆幸的是自己坚持了下来，一切从头开始！ 还有不到一个小时我们就将迎来2018年，在新年来临之际，每个人都许下的不同的新年愿望，2018年我要做什么？在这里我也对自己的2018年定几个小目标： 争取码2万行代码2017年的工作当中用到代码的机会并不多，但是作为今后的工作中的一个重要技能，代码量的多少直接决定了工作完成时效，在现有Python的基础上，闲余时间学习Java，为大数据框架的学习奠定一定基础。 锻炼10000分钟以上17年锻炼总时间为5700分钟，主要是因为中间有几个月因为一些个人原因耽误，18年坚持完成10000分钟。 发布50篇博客因为工作加学习时间占去每天大部分时间，所以博客的产出并不会太多吧，争取每月达到两篇，大多基本为个人学习及工作过程中遇到的一些问题及解决办法，同时会有可能不定时更新一些日常。 转变工作方式现阶段工作主要是以数据统计为主，接下来的一年中努力在工作中应用更多数据分析与数据挖掘相关知识，转变工作方式，提高工作效率。 个人问题无论是亲情还是友情，或者是感情，在17年处理的都不好，18年里尽可能的负起责任，不管是对自己还是对他人。 有的时候定目标是一个神奇的事情，你把目标写下来，一个字一个字写下来，贴在电脑桌前，也许会有神奇的作用，说不定就实现了呢。现在轮到你了，写下你的2018新年愿望吧，万一实现了呢。 最后，祝大家新年快乐，愿望成真，越来越好！]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
</search>
